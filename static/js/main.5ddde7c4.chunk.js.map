{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","Images/image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","toLocaleTimeString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","props","fetchedData","setState","state","this","image","src","coronaImage","alt","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,mOCmDpJC,EA/CD,SAAC,GAAwD,IAAD,IAAtDC,KAAOC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAEjD,OADAC,QAAQC,IAAIL,GACRA,EAIA,qBAAKM,UAAWC,IAAOC,UAAvB,SACI,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAW,EAAGC,QAAU,SAAxC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAK,EAAGV,UAAaW,IAAGV,IAAOW,KAAMX,IAAOY,UAAlF,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,EAAhD,oBACA,cAACF,EAAA,EAAD,CAAYG,QAAU,KAAtB,SACI,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAO1B,EAAU2B,MAAOC,SAAU,EAAGC,UAAU,QAEtE,cAACR,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAK3B,GAAY4B,iBAC1D,cAACV,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAK3B,GAAY6B,uBAC1D,cAACX,EAAA,EAAD,CAAYG,QAAU,QAAtB,yCAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAK,EAAGV,UAAaW,IAAGV,IAAOW,KAAMX,IAAON,WAAlF,SACI,eAACmB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,EAAhD,uBACA,cAACF,EAAA,EAAD,CAAYG,QAAU,KAAtB,SACA,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAOzB,EAAU0B,MAAOC,SAAU,EAAGC,UAAU,QAElE,cAACR,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAK3B,GAAY4B,iBAC1D,cAACV,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAK3B,GAAY6B,uBAC1D,cAACX,EAAA,EAAD,CAAYG,QAAU,QAAtB,uCAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAaC,IAAMC,GAAI,GAAIC,GAAK,EAAGV,UAAaW,IAAGV,IAAOW,KAAMX,IAAOL,QAAlF,SACI,eAACkB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAQ,gBAAgBC,cAAY,EAAhD,oBACA,cAACF,EAAA,EAAD,CAAYG,QAAU,KAAtB,SACA,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAOxB,EAAOyB,MAAOC,SAAU,EAAGC,UAAU,QAE/D,cAACR,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAK3B,GAAY4B,iBAC1D,cAACV,EAAA,EAAD,CAAYC,MAAQ,gBAApB,SAAqC,IAAIQ,KAAK3B,GAAY6B,uBAC1D,cAACX,EAAA,EAAD,CAAYG,QAAU,QAAtB,qCAnCT,c,yBCNTS,EAAM,iCACCC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAChBE,IACAE,EAAa,UAAMJ,EAAN,sBAAuBE,IAHnB,kBAMgDG,IAAMC,IAAIF,GAN1D,2BAMVtC,KAAOC,EANG,EAMHA,UAAWC,EANR,EAMQA,UAAWC,EANnB,EAMmBA,OAAQC,EAN3B,EAM2BA,WAN3B,kBAOV,CAACH,YAAWC,YAAWC,SAAQC,eAPrB,kCAUjBC,QAAQC,IAAR,MAViB,0DAAH,sDAcTmC,EAAc,uCAAG,gCAAAJ,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEflC,EAFe,EAEfA,KACD0C,EAAe1C,EAAK2C,KAAK,SAACC,GAAD,MAAgB,CAC3C3C,UAAY2C,EAAU3C,UAAU4C,MAChC1C,OAASyC,EAAUzC,OAAO0C,MAC1BC,KAAOF,EAAUG,eANC,kBAQfL,GARe,gCAYtBrC,QAAQC,IAAR,MAZsB,yDAAH,qDAgBd0C,EAAc,uCAAG,8BAAAX,EAAA,+EAEaE,IAAMC,IAAN,UAAaN,EAAb,eAFb,uBAEPe,EAFO,EAEfjD,KAAQiD,UAFO,kBAGfA,EAAUN,KAAI,SAACP,GAAD,OAAWA,EAAQc,SAHlB,gCAOtB7C,QAAQC,IAAR,MAPsB,yDAAH,qD,yBCqCZ6C,EAhED,SAAC,GAAsD,IAAD,IAAnDnD,KAAMC,EAA6C,EAA7CA,UAAWE,EAAkC,EAAlCA,OAAQD,EAA0B,EAA1BA,UAAakC,EAAa,EAAbA,QAAa,EAC9BgB,mBAAS,IADqB,mBACzDR,EADyD,KAC9CS,EAD8C,KAGhEC,qBAAU,YACQ,uCAAG,sBAAAjB,EAAA,kEACTgB,EADS,SACUZ,IADV,6EAAH,qDAGdc,KACF,IAEF,IAAMC,EACFvD,EAEI,cAAC,MAAD,CACCD,KAAM,CACHyD,OAAS,CAAC,WAAW,YAAY,UACjCC,SAAU,CAAC,CACPC,MAAQ,SACRC,gBAAgB,CACZ,oBACA,oBACA,qBAEJ5D,KAAO,CAACC,EAAU2B,MAAM1B,EAAU0B,MAAMzB,EAAOyB,UAGtDiC,QAAW,CACPC,OAAO,CAACC,SAAU,GAClBC,MAAQ,CAACD,SAAQ,EAAME,KAAK,oBAAD,OAAsB7B,OAGtD,KAEF8B,EACFtB,EAAUuB,OAEV,cAAC,OAAD,CACInE,KAAM,CACFyD,OAASb,EAAUD,KAAI,qBAAEG,QACzBY,SAAW,CAAC,CACR1D,KAAO4C,EAAUD,KAAI,qBAAE1C,aACvB0D,MAAQ,WACRS,YAAc,UACdC,MAAO,GACR,CACCrE,KAAO4C,EAAUD,KAAI,qBAAExC,UACvBwD,MAAQ,SACRS,YAAc,MACdR,gBAAkB,oBAClBS,MAAO,OAKb,KAGV,OACI,qBAAK9D,UAAYC,IAAOC,UAAxB,SACC2B,EAAUoB,EAAUU,K,mCCpCdI,EAxBM,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACInB,mBAAS,IADb,mBACrCoB,EADqC,KACnBC,EADmB,KAa5C,OAVAnB,qBAAU,YACQ,uCAAG,sBAAAjB,EAAA,kEACboC,EADa,SACazB,IADb,6EAAH,qDAIdO,KACF,CAACkB,IAKC,cAACC,EAAA,EAAD,CAAanE,UAAaC,IAAOmE,YAAjC,SACI,eAACC,EAAA,EAAD,CAAeC,aAAc,GAAGC,SAAU,SAACC,GAAD,OAAMR,EAAoBQ,EAAEC,OAAOpD,QAA7E,UACI,wBAAQA,MAAQ,GAAhB,oBACC4C,EAAiB7B,KAAI,SAACP,EAAQ6C,GAAT,OAAe,wBAAkBrD,MAASQ,EAA3B,SAAqCA,GAAtB6C,Y,iBCtBrD,MAA0B,kCCkD1BC,E,kDA3CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgBVZ,oBAjBmB,uCAiBG,WAAMnC,GAAN,eAAAC,EAAA,sEAEQF,EAAUC,GAFlB,OAEZgD,EAFY,OAGlB,EAAKC,SAAS,CACVrF,KAAOoF,EACPhD,QAAUA,IAEd/B,QAAQC,IAAI8E,GAPM,2CAjBH,sDAGf,EAAKE,MAAQ,CACRtF,KAAO,GACPoC,QAAS,IALC,E,gMAUWD,I,OAApBiD,E,OAENG,KAAKF,SAAS,CACVrF,KAAOoF,I,qIAgBL,IAAD,EACmBG,KAAKD,MAAtBtF,EADF,EACEA,KAAKoC,EADP,EACOA,QAEZ,OACI,sBAAK7B,UAAaC,IAAOC,UAAzB,UACI,qBAAKF,UAAaC,IAAOgF,MAAOC,IAAOC,EAAaC,IAAK,aACzD,cAAC,EAAD,CAAO3F,KAAMA,IACb,cAAC,EAAD,CAAeuE,oBAAuBgB,KAAKhB,sBAC3C,cAAC,EAAD,CAAOvE,KAAOA,EAAMoC,QAASA,W,GAtC3BwD,aCFlBC,IAASC,OAAQ,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAA2BC,SAASC,eAAe,U,mBCHtFpG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,sC","file":"static/js/main.5ddde7c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3YHoW\",\"card\":\"Cards_card__37Y48\",\"infected\":\"Cards_infected__CKEM5\",\"recovered\":\"Cards_recovered__3fw6T\",\"deaths\":\"Cards_deaths__fjfoz\"};","import React from 'react';\nimport styles from './Cards.module.css';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\n    console.log(confirmed);\n    if(!confirmed){\n        return 'Loading...'; \n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing = {3} justify = \"center\"> \n                <Grid item component = {Card} xs={12} md ={3} className = {cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Active</Typography>\n                        <Typography variant = 'h5'>\n                            <CountUp start={0} end = {confirmed.value} duration={1} seperator=\",\" />\n                        </Typography>\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toLocaleTimeString()}</Typography>\n                        <Typography variant = 'body2'>Number of Active Cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md ={3} className = {cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant = 'h5'>\n                        <CountUp start={0} end = {recovered.value} duration={1} seperator=\",\" />\n                        </Typography>\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toLocaleTimeString()}</Typography>\n                        <Typography variant = 'body2'>Number of Recoveries</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md ={3} className = {cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant = 'h5'>\n                        <CountUp start={0} end = {deaths.value} duration={1} seperator=\",\" />\n                        </Typography>\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toLocaleTimeString()}</Typography>\n                        <Typography variant = 'body2'>No. of Deaths</Typography>\n                    </CardContent>\n                </Grid>                \n            </Grid>\n        </div>\n    )\n    \n}\n\nexport default Cards","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n    if (country){\n        changeableUrl = `${url}/countries/${country}`;\n    }\n    try{\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\n        return {confirmed, recovered, deaths, lastUpdate};\n    }\n    catch(err){\n        console.log(err);\n    }\n}    \n\nexport const fetchDailyData = async () => {\n    try{\n        const {data} = await axios.get(`${url}/daily`);\n        const modifiedData = data.map( (dailyData) => ({\n            confirmed : dailyData.confirmed.total,\n            deaths : dailyData.deaths.total,\n            date : dailyData.reportDate,\n        }));\n        return modifiedData;\n        // console.log(data);\n    }\n    catch(err){\n        console.log(err);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try{\n        const {data : {countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country)=>country.name);\n        // console.log(response);\n    }\n    catch(err){\n        console.log(err);\n    }\n}","import React, {useState, useEffect} from 'react'\nimport {fetchDailyData} from '../../api';\nimport styles from './Chart.module.css';\nimport {Bar, Line} from 'react-chartjs-2';\n\n\nconst Chart = ({ data:{confirmed, deaths, recovered }, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n                setDailyData(await fetchDailyData());  \n        }\n        fetchAPI();\n    },[]);\n\n    const barChart = (\n        confirmed\n        ?(\n            <Bar\n             data={{\n                labels : ['Infected','Recovered','Deaths'],\n                datasets :[{\n                    label : 'People',\n                    backgroundColor:[\n                        'rgba(0,0,255,0.5)',\n                        'rgba(0,255,0,0.5)',\n                        'rgba(255,0,0,0.5)',\n                    ],\n                    data : [confirmed.value,recovered.value,deaths.value]   \n                }]\n            }}\n             options = {{\n                 legend:{display : false},\n                 title : {display:true, text: `Current state in ${country}`},\n             }}\n            />\n        ) : null\n    )\n    const lineChart = (\n        dailyData.length\n        ?( \n        <Line\n            data={{\n                labels : dailyData.map(({date})=> date),\n                datasets : [{\n                    data : dailyData.map(({confirmed})=> confirmed),\n                    label : 'Infected',\n                    borderColor : '#3333ff',\n                    fill : true,\n                }, {\n                    data : dailyData.map(({deaths})=> deaths),\n                    label : 'Deaths',\n                    borderColor : 'red',\n                    backgroundColor : 'rgba(255,0,0,0.5)',\n                    fill : true,\n\n                }],\n            }\n            }\n        />) : null\n\n    )\n    return(\n        <div className= {styles.container}>\n        {country ? barChart :lineChart}\n        </div>\n    )\n        \n}\nexport default Chart;","import React, {useState, useEffect} from 'react'\nimport {NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css'\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker= ({handleCountryChange}) => {\n    const [fetchedCountries, setfetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () =>{\n            setfetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    },[setfetchedCountries]);\n\n    // console.log(fetchedCountries);\n    \n    return (\n        <FormControl className = {styles.formControl}>\n            <NativeSelect  defaultValue =\"\" onChange={(e)=> handleCountryChange(e.target.value) }>\n                <option value = \"\">Global</option>\n                {fetchedCountries.map((country,i) => <option key = {i} value = {country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n        \n    )\n}\n\nexport default CountryPicker\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React, { Component } from 'react'\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './Images/image.png';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             data : {},\n             country: '',\n        }\n    }\n    \n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        // console.log(fetchedData);\n        this.setState({\n            data : fetchedData,\n        })\n        \n    }\n    handleCountryChange = async(country) =>{\n        \n        const fetchedData = await fetchData(country);\n        this.setState({\n            data : fetchedData,\n            country : country,\n        })\n        console.log(fetchedData);\n        //fetch data\n        // set the stae\n    }\n    \n    render() {\n        const {data,country} =  this.state;\n        \n        return (\n            <div className = {styles.container}>\n                <img className = {styles.image} src = {coronaImage} alt =\"Covid-19\"/>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange = {this.handleCountryChange}/>\n                <Chart data= {data} country={country}/>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( <React.StrictMode><App/></React.StrictMode>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__XqVO1\",\"image\":\"App_image___P2fi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__YEIn-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__zojK1\"};"],"sourceRoot":""}